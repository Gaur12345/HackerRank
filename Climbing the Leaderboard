Climbing the Leaderboard

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the climbingLeaderboard function below.
    static int[] climbingLeaderboard(int[] scores, int[] alice)
    {
        List <Integer> rank=new ArrayList<Integer>();
        List <Integer> scoresl1=new ArrayList<Integer>();
        List <Integer> ranksend=new ArrayList<Integer>();
        int count=1,flag=0,temp=0,rep=1;
        
        for(int k : scores)
            scoresl1.add(k);

        System.out.println(scoresl1);
        System.out.println(scores.length);

        for(int i=0;i<scoresl1.size();i++)
        {
           flag=0;
           rep=1;
           for(int j=i+1;j<scoresl1.size();j++)
           {
               if(scoresl1.get(i)==scoresl1.get(j))
               {
                   rep++;
                   flag=1;
                  
                   /*rank.add(count);
                   rank.add(count);
                   i++;
                   flag=1;
                   count++;*/
               }
           }
           if(rep>1)
           {
                for(int h=0;h<rep;h++)
                {
                    rank.add(count);
                }
                count++;
                i=i+rep-1;
           }
           if(flag==0)
           {
                rank.add(count);
                count++;
           }
        }
        for(int i=0;i<alice.length;i++)
        {
            flag=0;
            for(int j=0; j<scoresl1.size();j++)
            {
                if(alice[i]>scoresl1.get(j))
                {
                    scoresl1.add(j,alice[i]);
                    temp=rank.get(j);
                    ranksend.add(temp);
                    flag=1;
                    break;
                }
                else if(alice[i]>=scoresl1.get(j))
                {
                    scoresl1.add(j,alice[i]);
                    temp=rank.get(j);
                    ranksend.add(temp);
                    flag=1;
                    break;
                }
                
            }
            if(flag==0)
            {
                scoresl1.add(alice[i]);
                rank.add(count);
                ranksend.add(count);
                count++;
            }
            
        }
        int arr[]=new int[ranksend.size()];
        int l=0;
        for(int k1: ranksend)
        {
            arr[l]=k1;
            l++;
        }
        System.out.println(rank);
        return arr;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int scoresCount = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] scores = new int[scoresCount];

        String[] scoresItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < scoresCount; i++) {
            int scoresItem = Integer.parseInt(scoresItems[i]);
            scores[i] = scoresItem;
        }

        int aliceCount = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] alice = new int[aliceCount];

        String[] aliceItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < aliceCount; i++) {
            int aliceItem = Integer.parseInt(aliceItems[i]);
            alice[i] = aliceItem;
        }

        int[] result = climbingLeaderboard(scores, alice);

        for (int i = 0; i < result.length; i++) {
            bufferedWriter.write(String.valueOf(result[i]));

            if (i != result.length - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}


