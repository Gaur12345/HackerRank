//Merge two sorted linked lists

#include <assert.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();

typedef struct SinglyLinkedListNode SinglyLinkedListNode;
typedef struct SinglyLinkedList SinglyLinkedList;

struct SinglyLinkedListNode {
    int data;
    SinglyLinkedListNode* next;
};

struct SinglyLinkedList {
    SinglyLinkedListNode* head;
    SinglyLinkedListNode* tail;
};

SinglyLinkedListNode* create_singly_linked_list_node(int node_data) {
    SinglyLinkedListNode* node = malloc(sizeof(SinglyLinkedListNode));

    node->data = node_data;
    node->next = NULL;

    return node;
}

void insert_node_into_singly_linked_list(SinglyLinkedList** singly_linked_list, int node_data) {
    SinglyLinkedListNode* node = create_singly_linked_list_node(node_data);

    if (!(*singly_linked_list)->head) {
        (*singly_linked_list)->head = node;
    } else {
        (*singly_linked_list)->tail->next = node;
    }

    (*singly_linked_list)->tail = node;
}

void print_singly_linked_list(SinglyLinkedListNode* node, char* sep, FILE* fptr) {
    while (node) {
        fprintf(fptr, "%d", node->data);

        node = node->next;

        if (node) {
            fprintf(fptr, "%s", sep);
        }
    }
}

void free_singly_linked_list(SinglyLinkedListNode* node) {
    while (node) {
        SinglyLinkedListNode* temp = node;
        node = node->next;

        free(temp);
    }
}

// Complete the mergeLists function below.

/*
 * For your reference:
 *
 * SinglyLinkedListNode {
 *     int data;
 *     SinglyLinkedListNode* next;
 * };
 *
 */
SinglyLinkedListNode* mergeLists(SinglyLinkedListNode* head1, SinglyLinkedListNode* head2)
{
    int flag=0;
    if(head1==NULL)
        return head2;
    else if(head2==NULL)
        return head1;

    SinglyLinkedListNode *temp1,*temp2,*ptr,*ptr2;
    struct SinglyLinkedListNode *temp=(struct SinglyLinkedListNode *)malloc(sizeof(struct SinglyLinkedListNode));
    temp1=head1;
    temp2=head2;
    if(temp1->data < temp2->data)
    {
        temp->data=temp1->data;
        temp1=temp1->next;
        ptr=temp;
        ptr2=ptr;
        ptr2->next=NULL;
    }
    else if(temp1->data > temp2->data)
    {
        temp->data=temp2->data;
        temp2=temp2->next;
        ptr=temp;
        ptr2=ptr;
        ptr2->next=NULL;
    }
    else if(temp1->data == temp2->data)
    {
        struct SinglyLinkedListNode *tempu=(struct SinglyLinkedListNode *)malloc(sizeof(struct SinglyLinkedListNode));
        temp->data=temp1->data;
        temp->next=NULL;
        temp1=temp1->next;
        ptr=temp;
        ptr2=ptr;
        tempu->data=temp2->data;
        ptr2->next=tempu;
        ptr2=tempu;
        tempu->next=NULL;
        temp2=temp2->next;
    }
    while(temp1!=NULL || temp2!=NULL)
    {
        if(temp2!=NULL || temp1!=NULL)
        {
            if(temp1->data < temp2->data)
            {
                struct SinglyLinkedListNode *tempu=(struct SinglyLinkedListNode *)malloc(sizeof(struct SinglyLinkedListNode));
                tempu->data=temp1->data;
                ptr2->next=tempu;
                temp1=temp1->next;
                ptr2=tempu;
                ptr2->next=NULL;
            }
            else if(temp1->data > temp2->data)
            {
                struct SinglyLinkedListNode *tempu=(struct SinglyLinkedListNode *)malloc(sizeof(struct  SinglyLinkedListNode));
                tempu->data=temp2->data;
                temp2=temp2->next;
                ptr2->next=tempu;
                ptr2=tempu;
                ptr2->next=NULL;
            }
            else if(temp1->data == temp2->data)
            {
                struct SinglyLinkedListNode *tempu=(struct SinglyLinkedListNode *)malloc(sizeof(struct  SinglyLinkedListNode));
                tempu->data=temp1->data;
                ptr2->next=tempu;
                ptr2=tempu;
                ptr2->next=NULL;
                temp1=temp1->next;
                struct SinglyLinkedListNode *tempq=(struct SinglyLinkedListNode *)malloc(sizeof(struct  SinglyLinkedListNode));
                tempq->data = temp2->data;
                ptr2->next=tempq;
                ptr2=tempq;
                temp2=temp2->next;
                ptr2->next=NULL;
            }
            if(temp1==NULL)
            {
                ptr2->next=temp2; 
                flag=1;
                break;
            }
            if(temp2==NULL)
            {
                ptr2->next=temp1;
                flag=1;
                break;
            }
        }
        if(flag==1)
        {
            break;
        }    
    }
    return ptr;
}

int main()


